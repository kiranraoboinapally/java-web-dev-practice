
git config --global -e 
to edit username and email information in it.

for insert we press i in it
for exit press esc+shift+:wq then enter(wq means write and quit)

git config --global user.name "github_username"


pwd

ls

git status

git add .

git status

git commit -m "new" 
#m means message
git status

git remote add origin  url


git push -u origin main (or) git push origin master


git merge --abort
#if there is git conflict then undo it by using aabove command

find . -type f -name "*.class" -exec git rm {} \;
#used to delete certain files ends with .class extension to delete all


echo "*.class" >> .gitignore
git rm --cached "*.class"
#to avoid or ignoring .class in future commits 

#for cloning others tree branch or which is not a default main branch
git clone -b other-branch-name https://github.com/username/repo.git



git ls-files

git rm -rf folder1

git rm .

git rm --cached file2.txt

git restore --staged .


git branch 
//to check branches
*master
main

git branch branchname(main)


git checkout main


git checkout -b main1


git merge main1 main
//merging from main1 to main.



npx create-react-app myapp
npm start

npm install -g json-server
to run it 
json-server --watch data.json -p 3030


npm -i axios


In MySQL WorkBench to change port number>>>from 3306 to 3030
Open Notepad as Run administartaor and open below file and change port number from 3306 to 3030
C:\ProgramData\MySQL\MySQL Server 8.0\my.ini



usd currency converter api
https://open.er-api.com/v6/latest/USD


---

### **How to Ignore Untracked Files in Git**

1. **Add to `.gitignore`**:

   * Ensure the files or directories you want to ignore are listed in `.gitignore`. Example:

     ```bash
     /.metadata/
     back/tasksTODO.md
     back/README.md
     ```

2. **Untracked Files**:

   * Files marked in **red** by `git status` are **untracked** (not staged or committed yet).
   * These files are **ignored from future commits** once added to `.gitignore`.

3. **Clean Up Untracked Files**:

   * To remove untracked files that are ignored (and not tracked by Git), use:

     ```bash
     git clean -fdX
     ```
   * `-f` forces the operation, `-d` removes untracked directories, `-X` cleans only ignored files.

4. **Check Status**:

   * After cleaning up, run `git status` to ensure those files are no longer showing in red (untracked).

5. **Notes**:

   * Files in `.gitignore` won't be added to version control if untracked.
   * Once added, Git ignores them permanently unless `.gitignore` is modified.

---

## ✅ Situation Summary

* You have two branches: `branch1` and `branch2`.
* In `branch1`, you created and committed `file1` and `file2`.
* You then switched to `branch2` and created `file3` (without committing immediately).
* While on `branch2`, you saw `file3` listed even in `branch1` (before committing).
* Then you committed `file3` in `branch2`.
* Now you switched back to `branch1` and `file3` disappeared — it's not visible in `branch1`.

---

## 📋 Explanation Table

| Step | Current Branch | Action Taken                                   | Files in Working Directory             | Git Status / Reason                                                                          |
| ---- | -------------- | ---------------------------------------------- | -------------------------------------- | -------------------------------------------------------------------------------------------- |
| 1    | `branch1`      | Create `file1`, `file2` and commit             | `file1`, `file2`                       | Committed in `branch1`                                                                       |
| 2    | `branch2`      | Checkout `branch2`                             | `file1`, `file2` (copied from branch1) | No changes yet in this branch                                                                |
| 3    | `branch2`      | Create `file3` (no commit)                     | `file1`, `file2`, `file3`              | `file3` is **untracked**, so it's present across branches for now                            |
| 4    | `branch1`      | Checkout `branch1` (before committing `file3`) | `file1`, `file2`, `file3`              | Since `file3` was uncommitted, Git keeps it as untracked                                     |
| 5    | `branch2`      | Commit `file3`                                 | `file1`, `file2`, `file3`              | Now `file3` is tracked in `branch2` only                                                     |
| 6    | `branch1`      | Checkout `branch1` again                       | `file1`, `file2` (no `file3`)          | `file3` is tracked only in `branch2` — so it's removed from working directory when switching |

---

## 🔍 Why `file3` disappeared?

* When `file3` was **untracked**, Git doesn’t control it — so it stays even when you change branches.
* Once `file3` is **committed** to `branch2`, it becomes **tracked by Git only in `branch2`**.
* When you switch to `branch1`, Git aligns your working directory to match that branch — and since `file3` is **not part of `branch1`**, it's removed from the working directory.

---

## 🧠 Key Concepts to Remember

| Concept               | Meaning                                                                                 |
| --------------------- | --------------------------------------------------------------------------------------- |
| **Untracked file**    | Git doesn't care about it — it exists in all branches until deleted manually or tracked |
| **Tracked file**      | Git version-controls it — only appears in branches where it's committed                 |
| **Branch Checkout**   | Git updates working directory to reflect the files of the target branch                 |
| **Committing a file** | Links it to the current branch only                                                     |

---

## 🧪 You Can Try This

If you want to test and observe:

```bash
# Initialize a new repo
git init test-repo && cd test-repo

# Create and commit in branch1
git checkout -b branch1
echo "Hello" > file1 && echo "World" > file2
git add file1 file2 && git commit -m "Add file1 and file2"

# Switch to branch2 and create file3 (no commit)
git checkout -b branch2
echo "Branch2 file" > file3

# Observe file3 visible in both branches (untracked)
git checkout branch1   # file3 will still be there
ls                     # shows file1, file2, file3

# Commit file3 in branch2
git checkout branch2
git add file3 && git commit -m "Add file3"

# Now switch to branch1 again
git checkout branch1
ls  # file3 will be gone!
```

---






Ah, I see! You're looking to **pull an entire folder (and its contents)** from one branch into another, **while ignoring other directories**. You want to bring over **all commits** from that folder, but only **that specific folder** (no other directories or files).

### Goal:

* **Branch `x`**: Your current working branch.
* **Branch `a`**: Contains multiple directories and files, but you only want to pull **a specific folder** (and its contents) from branch `a` to branch `x` without pulling any changes from other folders or directories.

---

### Solution: **Using `git checkout` to bring in an entire folder from another branch**

We’ll use the `git checkout` method to **bring an entire folder (and all its contents)** from **branch `a`** to **branch `x`**, but **we’ll ensure that only the specific folder you want is pulled**.

This method will **ignore** all other folders and files from branch `a` except for the folder you specify.

### Step-by-Step Process

#### 1. **Switch to branch `x`**:

Make sure you're on **branch `x`** (the branch where you want to bring in the folder from `a`).

```bash
git checkout x
```

#### 2. **Pull the entire folder from branch `a`**:

Let's say the folder you want to pull from **branch `a`** is called `folder3/`. You can use `git checkout` to grab that folder from **branch `a`**, and it will **bring in all changes** to the folder without affecting anything else in the repository.

```bash
git checkout a -- folder3/
```

What happens here:

* `git checkout a` tells Git to look at branch `a`.
* `-- folder3/` tells Git to bring over the **entire folder `folder3/`** from branch `a` into your working directory on branch `x`.

This command will **merge the folder** (including all its contents) from branch `a` into branch `x`. It will ignore any other changes in **branch `a`**, and **only `folder3/`** will be affected in **branch `x`**.

#### 3. **Stage and Commit the Changes**:

Now, the folder `folder3/` (with all its files) will be in your working directory. You’ll want to stage and commit the changes.

```bash
git add folder3/
git commit -m "Pulled folder3 from branch a"
```

#### 4. **Check the Result**:

After this, if you check your **branch `x`**, you’ll see that:

* **Only `folder3/`** (and its contents) was pulled from **branch `a`**.
* **No other changes** from branch `a` (like changes in `folder1/`, `folder2/`, etc.) were brought over.

You can verify by:

```bash
git log --oneline
```

And, of course, by looking at the files:

```bash
ls folder3/
```

---

### Key Points:

* This method allows you to **bring in an entire folder**, including all its files and changes, from **any commit in `branch a`** into **branch x**.
* **Other folders and directories** in `branch a` (such as `folder1/`, `folder2/`) will **not be affected**.
* You can pull **all commits related to `folder3/`** into **branch `x`** without worrying about unwanted changes from other directories.

---

### Example Walkthrough:

Let’s walk through it again with an example.

#### Scenario:

* **Branch `x`** has `folder1/` and `folder2/`.
* **Branch `a`** has:

  * **folder1/** with some changes in `commit b`.
  * **folder2/** with some changes in `commit c`.
  * **folder3/** added in `commit d`.

You want to pull **only `folder3/`** from **branch `a`** to **branch `x`** without pulling any changes from `folder1/` and `folder2/` in `branch a`.

1. **Switch to branch `x`**:

```bash
git checkout x
```

2. **Pull `folder3/` from branch `a`**:

```bash
git checkout a -- folder3/
```

This will bring the **`folder3/`** from **branch `a`** into your working directory on **branch `x`**.

3. **Stage and commit** the folder:

```bash
git add folder3/
git commit -m "Pulled folder3 from branch a"
```

4. **Result**:

* `folder3/` is now in **branch `x`**, and no other directories (like `folder1/` or `folder2/`) have been affected by any commits in branch `a`.

---
